// Create this component to test web search buttons: src/components/debug/WebSearchButtonTester.js

'use client';

import { useState } from 'react';
import { useTheme } from '@/context/ThemeContext';

export default function WebSearchButtonTester() {
    const { theme } = useTheme();
    const [quotaInfo, setQuotaInfo] = useState(null);
    const [testResults, setTestResults] = useState([]);
    const [isLoading, setIsLoading] = useState(false);

    // Check current quota
    const checkQuota = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch('/api/debug/reset-quota', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            const data = await response.json();
            setQuotaInfo(data.quota);
        } catch (error) {
            console.error('Quota check failed:', error);
        }
    };

    // Reset quota for testing
    const resetQuota = async () => {
        try {
            setIsLoading(true);
            const token = localStorage.getItem('token');
            const response = await fetch('/api/debug/reset-quota', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            const data = await response.json();
            setQuotaInfo(data.quota);
            setTestResults(prev => [...prev, { type: 'quota-reset', result: data }]);
        } catch (error) {
            console.error('Quota reset failed:', error);
        } finally {
            setIsLoading(false);
        }
    };

    // Test web search button functionality
    const testWebSearchButton = async () => {
        try {
            setIsLoading(true);
            const testQuery = 'JavaScript best practices';
            
            // Create a mock web search button response
            const mockResponse = `
                <div style="--bg-primary: #141414; --bg-secondary: #141414; --bg-tertiary: #202020; --text-primary: #f8f9fa; --text-secondary: #e5e7eb; --text-tertiary: #9ca3af; --border-color: #2d2d2d; --accent-color: #3b82f6">
                    <div style="padding: 16px; text-align: center; color: var(--text-secondary); font-size: 14px; border: 1px dashed var(--border-color); border-radius: 8px; margin: 8px 0;">
                        ü§∑ flokkk community hasn't discussed <strong style="color: var(--text-primary);">${testQuery}</strong> yet.
                        <br><br>
                        <span style="color: var(--text-tertiary); font-size: 13px;">Be the first to start a discussion!</span>
                    </div>
                    
                    <div style="text-align: center; margin: 12px 0;">
                        <button class="web-search-button" 
                                data-query="${encodeURIComponent(testQuery)}" 
                                style="padding: 8px 16px; background: linear-gradient(135deg, #10b981, #059669); color: white; border: none; border-radius: 8px; font-size: 13px; font-weight: 500; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);">
                            üåê Search web for more (${quotaInfo?.remaining || 0} left)
                        </button>
                    </div>
                </div>
            `;

            // Create a container and inject the HTML
            const container = document.createElement('div');
            container.innerHTML = mockResponse;
            
            // Add to test results display
            setTestResults(prev => [...prev, { 
                type: 'mock-button-created', 
                result: { 
                    query: testQuery, 
                    buttonHTML: mockResponse.substring(0, 200) + '...',
                    quotaUsed: quotaInfo?.remaining || 0
                } 
            }]);

            // Temporarily add to DOM to test click
            document.body.appendChild(container);
            
            // Find the button and simulate click
            const button = container.querySelector('.web-search-button');
            if (button) {
                console.log('üß™ Testing web search button click...');
                
                // Simulate click event
                const clickEvent = new MouseEvent('click', {
                    bubbles: true,
                    cancelable: true,
                    view: window
                });
                
                button.dispatchEvent(clickEvent);
                
                setTestResults(prev => [...prev, { 
                    type: 'button-clicked', 
                    result: { 
                        success: true, 
                        query: button.dataset.query,
                        message: 'Button click simulated - check console for web search logs'
                    } 
                }]);
            }
            
            // Clean up
            setTimeout(() => {
                document.body.removeChild(container);
            }, 2000);
            
        } catch (error) {
            console.error('Button test failed:', error);
            setTestResults(prev => [...prev, { type: 'error', result: error.message }]);
        } finally {
            setIsLoading(false);
        }
    };

    // Test actual web search API
    const testWebSearchAPI = async () => {
        try {
            setIsLoading(true);
            const token = localStorage.getItem('token');
            const testQuery = 'Vue.js vs React comparison';
            
            const response = await fetch('/api/web-search', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    query: testQuery,
                    theme: theme
                })
            });

            const data = await response.json();
            setTestResults(prev => [...prev, { 
                type: 'web-search-api', 
                result: {
                    success: response.ok,
                    webSearchUsed: data.webSearchUsed,
                    quotaRemaining: data.quotaRemaining,
                    hasWebContent: data.response?.includes('üåê From the broader web:'),
                    responseLength: data.response?.length || 0
                }
            }]);

            // Update quota info
            if (data.quotaRemaining !== undefined) {
                setQuotaInfo(prev => ({ ...prev, remaining: data.quotaRemaining }));
            }

        } catch (error) {
            console.error('Web search API test failed:', error);
            setTestResults(prev => [...prev, { type: 'error', result: error.message }]);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div style={{ 
            background: 'var(--bg-secondary)', 
            border: '1px solid var(--border-color)', 
            borderRadius: '8px', 
            padding: '20px', 
            margin: '20px 0',
            color: 'var(--text-primary)'
        }}>
            <h2 style={{ margin: '0 0 16px 0' }}>üß™ Web Search Button Tester</h2>
            
            {/* Quota Info */}
            <div style={{ 
                background: 'var(--bg-tertiary)', 
                padding: '12px', 
                borderRadius: '6px', 
                marginBottom: '16px' 
            }}>
                <h3 style={{ margin: '0 0 8px 0', fontSize: '14px' }}>Current Quota:</h3>
                {quotaInfo ? (
                    <div style={{ fontSize: '13px', fontFamily: 'monospace' }}>
                        <div>Remaining: {quotaInfo.remaining}/{quotaInfo.dailyLimit}</div>
                        <div>Used: {quotaInfo.dailySearches}</div>
                        <div>Tier: {quotaInfo.subscriptionTier}</div>
                    </div>
                ) : (
                    <div style={{ fontSize: '13px', color: 'var(--text-tertiary)' }}>
                        Click "Check Quota" to load
                    </div>
                )}
            </div>

            {/* Action Buttons */}
            <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap', marginBottom: '20px' }}>
                <button 
                    onClick={checkQuota}
                    disabled={isLoading}
                    style={{ 
                        padding: '8px 16px', 
                        background: 'var(--accent-color)', 
                        color: 'white', 
                        border: 'none', 
                        borderRadius: '4px',
                        cursor: isLoading ? 'not-allowed' : 'pointer'
                    }}
                >
                    Check Quota
                </button>
                
                <button 
                    onClick={resetQuota}
                    disabled={isLoading}
                    style={{ 
                        padding: '8px 16px', 
                        background: '#f59e0b', 
                        color: 'white', 
                        border: 'none', 
                        borderRadius: '4px',
                        cursor: isLoading ? 'not-allowed' : 'pointer'
                    }}
                >
                    Reset Quota
                </button>
                
                <button 
                    onClick={testWebSearchButton}
                    disabled={isLoading || !quotaInfo?.remaining}
                    style={{ 
                        padding: '8px 16px', 
                        background: quotaInfo?.remaining ? '#10b981' : '#6b7280', 
                        color: 'white', 
                        border: 'none', 
                        borderRadius: '4px',
                        cursor: isLoading || !quotaInfo?.remaining ? 'not-allowed' : 'pointer'
                    }}
                >
                    Test Button Click
                </button>
                
                <button 
                    onClick={testWebSearchAPI}
                    disabled={isLoading || !quotaInfo?.remaining}
                    style={{ 
                        padding: '8px 16px', 
                        background: quotaInfo?.remaining ? '#3b82f6' : '#6b7280', 
                        color: 'white', 
                        border: 'none', 
                        borderRadius: '4px',
                        cursor: isLoading || !quotaInfo?.remaining ? 'not-allowed' : 'pointer'
                    }}
                >
                    Test Web Search API
                </button>
            </div>

            {/* Test Results */}
            {testResults.length > 0 && (
                <div>
                    <h3 style={{ margin: '0 0 12px 0', fontSize: '16px' }}>Test Results:</h3>
                    {testResults.slice(-5).map((test, index) => (
                        <div key={index} style={{ 
                            background: 'var(--bg-primary)', 
                            padding: '10px', 
                            borderRadius: '4px', 
                            marginBottom: '8px',
                            fontSize: '13px'
                        }}>
                            <strong style={{ color: 'var(--accent-color)' }}>{test.type}:</strong>
                            <pre style={{ 
                                margin: '4px 0 0 0', 
                                fontSize: '12px', 
                                color: 'var(--text-secondary)',
                                whiteSpace: 'pre-wrap'
                            }}>
                                {JSON.stringify(test.result, null, 2)}
                            </pre>
                        </div>
                    ))}
                </div>
            )}

            {isLoading && (
                <div style={{ 
                    textAlign: 'center', 
                    padding: '20px', 
                    color: 'var(--text-tertiary)' 
                }}>
                    üîÑ Running test...
                </div>
            )}
        </div>
    );
}